#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define ALPHABET_SIZE 26


char encryptChar(char plainChar, char keyChar) {
    if (isalpha(plainChar)) {
        char base = isupper(plainChar) ? 'A' : 'a';
        return ((plainChar - base) + (keyChar - 'A')) % ALPHABET_SIZE + base;
    } else {
        return plainChar;
    }
}


void polySubstitutionEncrypt(char *plaintext, char *key, char *ciphertext) {
    int keyLen = strlen(key);
    int i, j = 0;

    for (i = 0; plaintext[i] != '\0'; i++) {
        if (isalpha(plaintext[i])) {
            ciphertext[i] = encryptChar(plaintext[i], key[j]);
            j = (j + 1) % keyLen;
        } else {
            ciphertext[i] = plaintext[i];
        }
    }
    ciphertext[i] = '\0';
}

int main() {
    char plaintext[1000], key[100], ciphertext[1000];

    printf("Enter the plaintext: ");
    fgets(plaintext, sizeof(plaintext), stdin);
    printf("Enter the key: ");
    fgets(key, sizeof(key), stdin);

   
    plaintext[strcspn(plaintext, "\n")] = '\0';
    key[strcspn(key, "\n")] = '\0';

    polySubstitutionEncrypt(plaintext, key, ciphertext);

    printf("Encrypted text: %s\n", ciphertext);

    return 0;
}
