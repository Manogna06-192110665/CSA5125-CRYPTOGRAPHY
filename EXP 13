#include <stdio.h>

#define SIZE 2

void matrixMultiply(int key[SIZE][SIZE], int message[SIZE], int result[SIZE]) {
    int i, j;

    for (i = 0; i < SIZE; i++) {
        result[i] = 0;
        for (j = 0; j < SIZE; j++) {
            result[i] += key[i][j] * message[j];
        }
    }
}

void chosenPlaintextAttack(int ciphertext[SIZE], int plaintext[SIZE], int key[SIZE][SIZE]) {
    int i, j;
    int inverse_key[SIZE][SIZE];
    int determinant;

    determinant = key[0][0] * key[1][1] - key[0][1] * key[1][0];

    inverse_key[0][0] = key[1][1];
    inverse_key[0][1] = -key[0][1];
    inverse_key[1][0] = -key[1][0];
    inverse_key[1][1] = key[0][0];

    for (i = 0; i < SIZE; i++) {
        for (j = 0; j < SIZE; j++) {
            while (inverse_key[i][j] < 0) {
                inverse_key[i][j] += 26;
            }
            inverse_key[i][j] %= 26;
        }
    }

    matrixMultiply(inverse_key, ciphertext, plaintext);
}

int main() {
    int key[SIZE][SIZE] = {{9, 4}, {5, 7}};
    int plaintext[SIZE] = {0}; 
    int ciphertext[SIZE] = {3, 6}; 

    printf("Chosen Ciphertext: %d %d\n", ciphertext[0], ciphertext[1]);

    chosenPlaintextAttack(ciphertext, plaintext, key);

    printf("Recovered Plaintext: %d %d\n", plaintext[0], plaintext[1]);

    return 0;
}
